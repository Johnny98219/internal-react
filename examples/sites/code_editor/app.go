// Template generated by reactGen

package main

//go:generate reactGen

import (
	"go/format"

	"honnef.co/go/js/dom"
	r "myitcv.io/react"
)

type AppDef struct {
	r.ComponentDef
}

type AppState struct {
	rawText   string
	formatted string
}

func App() *AppElem {
	return buildAppElem()
}

func (a AppDef) Render() r.Element {
	return r.Div(&r.DivProps{ClassName: "row"},
		r.Div(&r.DivProps{ClassName: "col-md-6"},
			r.TextArea(
				&r.TextAreaProps{
					Value:    a.State().rawText,
					Style:    &r.CSS{Width: "100%"},
					OnChange: rawTextChange{a},
				},
			),
		),
		r.Div(&r.DivProps{ClassName: "col-md-6"},
			r.TextArea(
				&r.TextAreaProps{
					Value: a.State().formatted,
					Style: &r.CSS{Width: "100%"},
				},
			),
		),
	)
}

type rawTextChange struct {
	a AppDef
}

func (r rawTextChange) OnChange(e *r.SyntheticEvent) {
	s := r.a.State()

	ta := e.Target().(*dom.HTMLTextAreaElement)

	s.rawText = ta.Value
	s.formatted = ta.Value

	if fbytes, err := format.Source([]byte(s.rawText)); err == nil {
		s.formatted = string(fbytes)
	}

	r.a.SetState(s)

	e.PreventDefault()
}
