// Code generated by immutableGen

package main

import (
	"github.com/myitcv/immutable"

	r "github.com/myitcv/gopherjs/react"
)

//
// example is an immutable type and has the following template:
//
// 	struct {
// 		title		string
// 		message		string
// 		jsxSourceStr	string
// 		goSourceFile	string
// 		goSourceStr	string
// 		elem		func() r.Element
// 	}
//
type example struct {
	_title        string
	_message      string
	_jsxSourceStr string
	_goSourceFile string
	_goSourceStr  string
	_elem         func() r.Element

	mutable bool
	__tmpl  _Imm_example
}

var _ immutable.Immutable = &example{}

func (s *example) AsMutable() *example {
	if s.Mutable() {
		return s
	}

	res := *s
	res.mutable = true
	return &res
}

func (s *example) AsImmutable(v *example) *example {
	if s == nil {
		return nil
	}

	if s == v {
		return s
	}

	s.mutable = false
	return s
}

func (s *example) Mutable() bool {
	return s.mutable
}

func (s *example) WithMutable(f func(si *example)) *example {
	res := s.AsMutable()
	f(res)
	res = res.AsImmutable(s)

	return res
}

func (s *example) WithImmutable(f func(si *example)) *example {
	prev := s.mutable
	s.mutable = false
	f(s)
	s.mutable = prev

	return s
}
func (s *example) title() string {
	return s._title
}

// setTitle is the setter for Title()
func (s *example) setTitle(n string) *example {
	if s.mutable {
		s._title = n
		return s
	}

	res := *s
	res._title = n
	return &res
}
func (s *example) message() string {
	return s._message
}

// setMessage is the setter for Message()
func (s *example) setMessage(n string) *example {
	if s.mutable {
		s._message = n
		return s
	}

	res := *s
	res._message = n
	return &res
}
func (s *example) jsxSourceStr() string {
	return s._jsxSourceStr
}

// setJsxSourceStr is the setter for JsxSourceStr()
func (s *example) setJsxSourceStr(n string) *example {
	if s.mutable {
		s._jsxSourceStr = n
		return s
	}

	res := *s
	res._jsxSourceStr = n
	return &res
}
func (s *example) goSourceFile() string {
	return s._goSourceFile
}

// setGoSourceFile is the setter for GoSourceFile()
func (s *example) setGoSourceFile(n string) *example {
	if s.mutable {
		s._goSourceFile = n
		return s
	}

	res := *s
	res._goSourceFile = n
	return &res
}
func (s *example) goSourceStr() string {
	return s._goSourceStr
}

// setGoSourceStr is the setter for GoSourceStr()
func (s *example) setGoSourceStr(n string) *example {
	if s.mutable {
		s._goSourceStr = n
		return s
	}

	res := *s
	res._goSourceStr = n
	return &res
}
func (s *example) elem() func() r.Element {
	return s._elem
}

// setElem is the setter for Elem()
func (s *example) setElem(n func() r.Element) *example {
	if s.mutable {
		s._elem = n
		return s
	}

	res := *s
	res._elem = n
	return &res
}
