package examples

import (
	"honnef.co/go/js/xhr"
	"myitcv.io/highlightjs"
	r "myitcv.io/react"
)

// GlobalStateExamplesDef is the definition of the GlobalStateExamples component
type GlobalStateExamplesDef struct {
	r.ComponentDef
}

// GlobalStateExamples creates instances of the GlobalStateExamples component
func GlobalStateExamples() *GlobalStateExamplesDef {
	res := new(GlobalStateExamplesDef)
	r.BlessElement(res, nil)
	return res
}

// GlobalStateExamplesState is the state type for the GlobalStateExamples component
type GlobalStateExamplesState struct {
	examples     *exampleSource
	selectedTabs *tabS
}

// ComponentWillMount is a React lifecycle method for the GlobalStateExamples component
func (p *GlobalStateExamplesDef) ComponentWillMount() {
	if !fetchStarted {
		for i, e := range sources.Range() {
			go func(i exampleKey, e *source) {
				req := xhr.NewRequest("GET", "https://raw.githubusercontent.com/myitcv/react/master/examples/"+e.file())
				err := req.Send(nil)
				if err != nil {
					panic(err)
				}

				sources = sources.Set(i, e.setSrc(req.ResponseText))

				newSt := p.State()
				newSt.examples = sources
				p.SetState(newSt)
			}(i, e)
		}

		fetchStarted = true
	}
}

// GetInitialState returns in the initial state for the GlobalStateExamples component
func (p *GlobalStateExamplesDef) GetInitialState() GlobalStateExamplesState {
	return GlobalStateExamplesState{
		examples:     sources,
		selectedTabs: newTabS(),
	}
}

// Render renders the GlobalStateExamples component
func (p *GlobalStateExamplesDef) Render() r.Element {

	return r.Div(&r.DivProps{ClassName: "container"},
		r.Div(&r.DivProps{DangerouslySetInnerHTML: r.DangerousInnerHTML(`
		<h3>Introduction</h3>

		<p>State can be local to components; we can share that state with descendent components
		by passing props.</p>

		<p>But this can either lead to passing around a lot of props, or not be possible at all because
		two components are in very different parts of the component (ultimately DOM) tree.</p>

		<p>State trees generated by <a href="https://github.com/myitcv/react/tree/master/cmd/stateGen">
		<code>stateGen</code></a> exist to fill this gap.</p>

		<p>This example is best considered as a standalone web app (because the state tree is effectively)
		a global in the application).</p>

		<p><a role="button" href="../globalstate" target="_blank" class="btn btn-primary">Launch Example</a></p>

		<p>The source code for the example that follows can be found <a href="https://github.com/myitcv/react/tree/master/examples/globalstate">
		Github repo</a>.
		`)}),
	)
}

func (p *GlobalStateExamplesDef) renderExample(key exampleKey, title, msg r.Element, jsxSrc string, elem r.Element) r.Element {

	var goSrc string
	src, _ := p.State().examples.Get(key)
	if src != nil {
		goSrc = src.src()
	}

	var code *r.DangerousInnerHTMLDef
	switch v, _ := p.State().selectedTabs.Get(key); v {
	case tabGo:
		code = r.DangerousInnerHTML(highlightjs.Highlight("go", goSrc, true).Value)
	case tabJsx:
		code = r.DangerousInnerHTML(highlightjs.Highlight("javascript", jsxSrc, true).Value)
	}

	return r.Div(nil,
		r.H3(nil, title),
		msg,
		r.Div(&r.DivProps{ClassName: "row"},
			r.Div(&r.DivProps{ClassName: "col-md-8"},
				r.Div(&r.DivProps{ClassName: "panel panel-default with-nav-tabs"},
					r.Div(&r.DivProps{ClassName: "panel-heading"},
						r.Ul(
							&r.UlProps{ClassName: "nav nav-tabs"},

							p.buildExampleNavTab(key, tabGo, "GopherJS"),
							p.buildExampleNavTab(key, tabJsx, "JSX"),
						),
					),
					r.Div(&r.DivProps{ClassName: "panel-body"},
						r.Pre(&r.PreProps{
							Style: &r.CSS{
								MaxHeight: "400px",
							},
							DangerouslySetInnerHTML: code,
						}),
					),
				),
			),
			r.Div(&r.DivProps{ClassName: "col-md-4"},
				plainPanel(elem),
			),
		),
	)
}

func (p *GlobalStateExamplesDef) buildExampleNavTab(key exampleKey, t tab, title string) *r.LiDef {
	lip := &r.LiProps{Role: "presentation"}

	if v, _ := p.State().selectedTabs.Get(key); v == t {
		lip.ClassName = "active"
	}

	return r.Li(
		lip,
		r.A(
			&r.AProps{Href: "#", OnClick: gsTabChange{p, key, t}},
			r.S(title),
		),
	)

}

type gsTabChange struct {
	e   *GlobalStateExamplesDef
	key exampleKey
	t   tab
}

func (tc gsTabChange) OnClick(e *r.SyntheticMouseEvent) {
	p := tc.e
	key := tc.key
	t := tc.t

	cts := p.State().selectedTabs
	newSt := p.State()

	newSt.selectedTabs = cts.Set(key, t)
	p.SetState(newSt)

	e.PreventDefault()
}

func (p *GlobalStateExamplesDef) handleTabChange(key exampleKey, t tab) func(*r.SyntheticMouseEvent) {
	return func(e *r.SyntheticMouseEvent) {
		cts := p.State().selectedTabs
		newSt := p.State()

		newSt.selectedTabs = cts.Set(key, t)
		p.SetState(newSt)

		e.PreventDefault()
	}
}
